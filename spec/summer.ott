% metavar termvar, x, y, z, f, g, ::=
% 
% indexvar indices, i, j, k, n ::=


grammar

program, prog :: 'prog_' ::=
    | statement ; program                   ::   :: seq
    {{com sequencing }}
    | expr ; program                        ::   :: expr_seq
    {{com the semantics of this are ``evaluate expr performing
        side-effects in the process'', currently there are no side effects
        during evaluation of expressions but there will be in the future,
        e.g. function calls are expressions and may be effectful }}
    | nop ;                                 ::   :: nop
    {{com end of program }}

statement :: 'stmt_' ::=
    | let id : type = expr                  ::   :: var_decl
    | identifier = expr                     ::   :: var_asgn
    | if ( expr ) { prog1 } else { prog2 }  ::   :: if

expr :: 'expr_' ::=
    | bool                                  ::   :: atom_bool
    | number                                ::   :: atom_num
    | string                                ::   :: atom_str
    | identifier                            ::   :: ident
    | op expr                               ::   :: unary_operator
    | expr1 op expr2                        ::   :: binary_operator
    | ( expr )                              :: M :: parens


bool, b :: 'bool_' ::= 
    {{com syntactic category of bool literals }}

number, num, n, m :: 'number_' ::=
    {{com syntactic category of number literals }}

string, str, s, t :: 'string_' ::=
    {{com syntactic category of string literals }}

operator, op :: 'operator_' ::=
    {{com syntactic category of operators }}

identifier, id :: 'id_' ::=
    {{com syntactic category of identifier }}

type, tid :: 'tid_' ::=
      {{com syntactic category of type identifiers }}

% Will also put basic tokens in here
terminals :: 'terminal_' ::=